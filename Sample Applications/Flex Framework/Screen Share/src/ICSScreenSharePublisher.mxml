<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
  		   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:rtc="http://ns.adobe.com/rtc"
			   xmlns:views="com.influxis.views.*"
			   minWidth="955"
			   minHeight="600"
			   backgroundColor="black" 
			   >
	
	<fx:Script>
		<![CDATA[
			import com.adobe.rtc.clientManagers.MicrophoneManager;
			import com.adobe.rtc.events.AddInLauncherEvent;
			import com.adobe.rtc.events.ScreenShareEvent;
			import com.adobe.rtc.events.StreamEvent;
			import com.adobe.rtc.events.UserEvent;
			import com.adobe.rtc.sharedManagers.StreamManager;
			import com.adobe.rtc.sharedManagers.UserManager;
			import com.adobe.rtc.sharedManagers.descriptors.UserDescriptor;
			import com.influxis.controls.MicActivityControl;
			import com.influxis.events.ActivityLevelEvent;
			import com.influxis.rtc.ui.controls.ScreenShareControl;
			import com.influxis.views.RosterItem;
			import com.influxis.views.SettingsView;
			
			import mx.collections.ArrayCollection;
			
			import org.osmf.events.TimeEvent;
			
			import spark.events.PopUpEvent;
			
			/*
			- finish viewer side.
			- Should pause streaming by clicking on roll over button.
			- record session
			- fullscreen for Viewer and Pub
			- make it so you can pass in rtmp room and security key via html.
			
			//v2
			- create class to stop start shared Audio stream (GroupAudioShareControl).
			- shares audio feed with everyone andmin can give mic privlidges.
			- shares activity info with stream so that user can see mic activity on view end.
			- v2 can have multiple users with audio.  Keep list (Shared List)
			- show audio tag for each user speaking, represented on stage with activity icon. viewer can mute incoming.
			- v2 each user will have a unique stream name so safe stream to playback on listeners.
			- Local user should not hear self.
			- Need to share audio activity with list for each indiv user.
			- v2 admin can control who can speak and who cant
			- can remove mic privilages.
			- v2 admin can remove from list (kick off)
			
			- Create UserCount view (User Manager)
			- v2: make a list of users, with kicking banning capabilities for admin.
			
			- show/hide Settings view.
			- Do TW / FB sharing. simple just run a browser window with fb or tw and attach path n info to presentation page.
			- shared cursor for guest presenters?
			*/
			
			//protected var activityTimer:Timer;
			protected var users:UserManager;
			protected var presenterItems:Object = new Object();
			
			
			public var version:String = 		"0.5.1.2";
	
			
			public var authPath:String = 		"http://yourdomain.com/auth.php";
			public var room:String = 			"YOURROOMNAME";
			
			public var role:int = 				50;//participant. 10;//viewer
			//d
			public var pubId:String;
			public var ssControl:ScreenShareControl;
			
			public var settingsPanel:SettingsView;
			public var micActivity:MicActivityControl;
			public var micReset:Boolean = false;
			
			
			public function refreshUserList( event:UserEvent=null ):void
			{
				var audience:ArrayCollection = users.audienceCollection;
				//var ot:ArrayCollection = users.userCollection;
				var n:int = audience.length;
				//usersView.label = n + (n == 1 ? " User" : " Users" );
				userCount.text = n.toString();
				
				//if is null we are refreshing it.
				var user:UserDescriptor;
				var view:RosterItem;
				if( event == null ) {
					
					var participants:ArrayCollection = users.participantCollection;
					for( var i:String in participants ){
						user = participants[i] as UserDescriptor;
						if( this.presenterItems[user.userID] == null ){
							view = new RosterItem();
							view.icsUser = user;
							this.presenterRoster.addChild( view );
							this.presenterItems[user.userID] = view;
						}
					}
					return;
				}
				
				//todo - make this a presenter list view. contain the code in 1 class.
				user = event.userDescriptor;
				if( user.role != this.role ) return;//not a presenter
				
				var item:DisplayObject;
				var type:String = event.type;
				switch( type ){
					case UserEvent.USER_REMOVE:
						item = presenterItems[user.userID];
						//remove presenter item
						if( item ){
							this.presenterRoster.removeChild(item);
							delete presenterItems[user.userID];
							tracer("user: "+user.userID+", has been removed: "+presenterItems[user.userID]);
						}
						break;
					case UserEvent.USER_CREATE:
						view = new RosterItem();
						view.icsUser = user;
						this.presenterRoster.addChild( view );
						this.presenterItems[user.userID] = view;
						tracer("user: "+user.userID+", has been added: "+presenterItems[user.userID]);
						break;
				}
				
			}
			
			public function startAudio():void
			{
				var b:Boolean = audioPub.isPublishing;
				trace("startAudio: "+b);
				if( !b ){
					audioPub.publish();
					//activityTimer.start();
				} else {
					audioPub.stop();
					//activityTimer.stop();
					this.updateAudioBar( 3 );
				}
				//this.mic_bt.label = !b ? "Stop Audio" : "Start Audio";
			}
			
			public function startSS():void
			{
				if( this.ssControl.isSharingScreen ){
					stopSS();
				} else {
					this.ssControl.startSharing();
				}
			}
			
			public function stopSS():void
			{
				this.ssControl.stopSharing();
			}
			
			public function pauseSS():void
			{
				if( !this.ssControl.isSharingScreen ) return;
				
				this.ssControl.pauseSharing( !this.ssControl.isPaused );
			}
			
			protected function onScreenShareEvents( event:StatusEvent ):void
			{
				tracer("onScreenShareEvents "+event);
				
				//default butons.
				//startss_bt.enabled = false;
				//stopss_bt.enabled = false;
				//pause_bt.enabled = false;
				//pause_bt.label = "Pause Screen Sharing";
				
				var code:String = event.code;
				switch( code ){
					case "publish.start":
						//stopss_bt.enabled = true;
						//pause_bt.enabled = true;
						localSSNote.visible = true;
						if( !scrShareBtn.selected ) scrShareBtn.selected = true;
						break;
					case "publish.stop":
						//startss_bt.enabled = true;
						localSSNote.visible = false;
						if( scrShareBtn.selected ) scrShareBtn.selected = false;
						break;
					case "publish.paused":
					case "publish.unpaused":
						//if(this.ssControl.isPaused) pause_bt.label = "Resume Screen Sharing";
						//pause_bt.enabled = true;
						//stopss_bt.enabled = true;
						break;
				}
			}
			
			protected function onAuthSuccess():void
			{
				//init screen share control 
				this.ssControl = new ScreenShareControl();
				this.ssControl.screenPublisher = this.ssPublisher;
				this.ssControl.addEventListener( ScreenShareControl.SHARE_SCREEN_STATUS,onScreenShareEvents );
				
				trace("auth success!! "+audioPub);
				audioPub.addEventListener(StreamEvent.STREAM_RECEIVE,onStreamReceive);
				audioPub.addEventListener(StreamEvent.STREAM_DELETE,onStreamDelete);
				
				this.users = this.cSession.userManager as UserManager;
				this.users.addEventListener(UserEvent.USER_CREATE, refreshUserList );
				this.users.addEventListener(UserEvent.USER_REMOVE, refreshUserList );
				
				//listen to mic activity and changes.
				micActivity = new MicActivityControl();
				micActivity.addEventListener(MicActivityControl.MIC_ACTIVITY, onMicActivity );
				//micActivity.addEventListener(MicActivityControl.READY, onMicStatus );
				//micActivity.addEventListener(Event.CHANGE, onMicStatus );
				micActivity.init();
				
				this.settingsPanel = new SettingsView();
				this.settingsPanel.addEventListener(Event.CLOSE, this.onSettingsClose );
				this.settingsPanel.addEventListener(Event.CHANGE, onMicStatus );
				this.settingsPanel.micActivityControl = this.micActivity;
				
				this.refreshUserList();
				loginWindow.visible = false;
			}
			
			protected function onMicStatus( event:Event ):void
			{
				var type:String = event.type;
				tracer("onMicStatus "+type);
				
				switch( type ){
					case Event.CHANGE:
						//mic will not accept if streaming. workaround: need to stop streaming and stream again.
						if( audioPub.isPublishing ){
							micReset = true;
							audioPub.stop();
						}
						
						break;
				}
				
			}
			
			/****
			 * When published stream is received, start polling the activity level of my microphone.
			 */
			protected function onStreamReceive(p_evt:StreamEvent):void
			{
				if ( p_evt.streamDescriptor.finishPublishing && p_evt.streamDescriptor.streamPublisherID == cSession.userManager.myUserID) {
					if ( audioPub.microphone != null ) {
						//activityTimer.addEventListener(TimerEvent.TIMER_COMPLETE,onTimerComplete);
						//activityTimer.start();
						this.micActivity.detectMicActivity( true );
					}
				}
			}
			
			
			/****
			 * When the stream is deleted, stop polling the
			 * activity level of microphone and mark the activity progress bar to 0.
			 */
			protected function onStreamDelete(p_evt:StreamEvent):void
			{
				if ( p_evt.streamDescriptor.streamPublisherID == cSession.userManager.myUserID) {
					if( micReset ){
						this.audioPub.publish();
						micReset = false;
					} else {
						this.micActivity.detectMicActivity( false );
					}
					this.updateAudioBar( 3 );
				}
			}
			
			/*
			private function onStreamDelete(p_evt:StreamEvent):void
			{
				var publisherDescriptor:UserDescriptor = null;
				
				if(p_evt.streamDescriptor.originalScreenPublisher != null){
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.originalScreenPublisher);
				} else {
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.streamPublisherID);
				}
				
				var myDescriptor:UserDescriptor = cSession.userManager.getUserDescriptor(cSession.userManager.myUserID);
				
				if(p_evt.streamDescriptor.type == StreamManager.SCREENSHARE_STREAM) {
					if(publisherDescriptor.displayName == myDescriptor.displayName ||
						publisherDescriptor.userID.indexOf(myDescriptor.userID) >= 0){
						
						//startss_bt.enabled = true;
						//stopss_bt.enabled = false;
						//pause_bt.enabled = false;
						//////publisherid.text = "";
						//////streamid.text = "";
					}
				}
				
			}
			*/
			
			protected function onShowSettings():void
			{
				if( !this.settingsPanel.isOpen ){
					this.settingsPanel.open(this);
					trace("this.menuBar.x "+this.menuBar.x+", this.menuBar.y "+this.menuBar.y);
					this.settingsPanel.move( this.menuBar.x + 20, this.menuBar.y - (this.settingsPanel.height+20) );
				} else {
					this.settingsPanel.close();
				}
			}
			
			protected function onSettingsClose( event:PopUpEvent ):void
			{
				var data:* = event.data;
				this.tracer( data );
				this.settingsBtn.selected = false;
			}
			
			// addin cancelled
			protected function onAddinStop(p_evt:AddInLauncherEvent):void
			{
				//startss_bt.enabled = true;
				//stopss_bt.enabled = false;
				//pause_bt.enabled = false;
				//////publisherid.text = "";
				//////streamid.text = "";
			}
			
			protected function onStreamReceived(p_evt:StreamEvent):void
			{
				var publisherDescriptor:UserDescriptor = null;
				if(p_evt.streamDescriptor.originalScreenPublisher != null){
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.originalScreenPublisher);
				} else {
					publisherDescriptor = cSession.userManager.getUserDescriptor(p_evt.streamDescriptor.streamPublisherID);
				}
				var myDescriptor:UserDescriptor = cSession.userManager.getUserDescriptor(cSession.userManager.myUserID);
				
				if(p_evt.streamDescriptor.type == StreamManager.SCREENSHARE_STREAM && publisherDescriptor != null) {
					if(publisherDescriptor.displayName == myDescriptor.displayName ||
						publisherDescriptor.userID.indexOf(myDescriptor.userID) >= 0){
						//publisherid.text = p_evt.streamDescriptor.originalScreenPublisher;
						//streamid.text = p_evt.streamDescriptor.id;
						this.pubId = p_evt.streamDescriptor.originalScreenPublisher;
					}
				}
			}
			
			/* 
			protected function onInfo():void
			{
				var s:String = "Quality: "+sspublisher.quality+", "+
				"Performace: "+sspublisher.performance+", "+
				"keyFrameInterval: "+sspublisher.keyFrameInterval+", "+
				"fps: " + sspublisher.fps
				
				this.logTxt.text = s;
			} 
			*/
			
			protected function onLogin():void
			{
				var un:String = this.userNameTxt.text;
				
				conStatusLabel.text = "Connecting...";
				
				this.loginBtn.enabled = false;
				
				var req:URLRequest = new URLRequest( authPath );
				req.method = URLRequestMethod.GET;
				req.data = new URLVariables();
				req.data.user = un;
				req.data.role = role;
				req.data.room = this.room;
				trace("user "+un+", role: "+role+",  url: "+req.url);
				
				var ldr:URLLoader = new URLLoader();
				ldr.dataFormat = URLLoaderDataFormat.VARIABLES;
				ldr.addEventListener(Event.COMPLETE, onLoginData );
				ldr.load( req );
				
				//listen to mic activity and changes.
				//micActivity.addEventListener(MicActivityControl.MIC_ACTIVITY, onMicActivity );
				//micActivity.addEventListener(MicActivityControl.READY, onMicStatus );
				//micActivity.addEventListener(Event.CHANGE, onMicStatus );
				
				//setup sound activity bar.
				/*
				if( activityTimer == null ){
					activityTimer = new Timer(200);
					activityTimer.addEventListener(TimerEvent.TIMER,this.onAudActivity);
				}
				*/
				/* 
				var mgr:MicrophoneManager = MicrophoneManager.getInstance() as MicrophoneManager;
				tracer("mgr: "+mgr); 
				*/
			};
			
			protected function onLoginData( event:Event ):void
			{
				var ldr:URLLoader = event.target as URLLoader;
				var data:* = ldr.data;
				
				var token:String = data.token as String;
				var room:String = data.roomURL as String;
				trace("onLoginData token: "+token+", roomURL: "+room);
				this.auth.authenticationKey = token;
				this.cSession.roomURL = room;
				this.cSession.login();
				
				// TODO Auto-generated method stub
				//var pass:String = "";//this.passTxt.text;//
				//this.auth.password = pass;
				//this.auth.authenticationKey = token;
				//trace("onLogin - Pass: "+pass+", Token: "+token);
				//this.cSession.login();
			}
			
			/*
			protected function onAudActivity( event:TimerEvent ):void
			{
				if( this.audioPub.microphone == null ) return;
				
				var n:Number = this.audioPub.microphone.activityLevel;
				this.updateAudioBar( n );
			}
			*/
			protected function onMicActivity( event:ActivityLevelEvent ):void
			{
				//tracer("onMicActivity "+event);
				this.updateAudioBar( event.activityLevel );
			}
			
			protected function updateAudioBar( level:Number ):void
			{
				//tracer("updateAudioBar - activityLevel: "+level);
				if( level < 2 ) level=2;
				micActivityBar.scaleY = level/100;
			}
			
			protected function onLoginKeyEvents(event:KeyboardEvent):void
			{
				tracer( "onLoginKeyEvents "+event );
				var code:uint = event.keyCode;
				//if its the enter key.
				if( code == 13 ){
					this.onLogin();
				}
			}
			
			//priv
			protected function tracer( p_msg:* ):void
			{
				trace("#Main#  "+p_msg);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<rtc:AdobeHSAuthenticator id="auth" userName="$NameTxt"/>
	</fx:Declarations>
	
	<!-- 
	Login Window
	-->
	<s:Group width="100%" height="100%" visible="true">
		
		<s:layout>
			<s:VerticalLayout verticalAlign="middle" horizontalAlign="center"/>
		</s:layout>
		
		<s:SkinnableContainer width="300" height="230" >
			
			<s:Rect left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
				<s:stroke>
					<s:SolidColorStroke color="0x333333" weight="0.5"/>
				</s:stroke>
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:entries>
							<s:GradientEntry color="white"/>
							<s:GradientEntry color="white"/>
							<s:GradientEntry color="0x999999"/>
						</s:entries>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			
			<s:VGroup id="loginWindow" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				<s:Label text="Login to Share Screen" textAlign="center" fontSize="18" fontFamily="Arial" fontWeight="bold"/>
				<s:Spacer height="10"/>
				<s:HGroup width="80%" horizontalAlign="center" verticalAlign="middle">
					<s:Label text="User Name:" textAlign="right" width="70"/>
					<s:TextInput id="userNameTxt" width="140" keyUp="onLoginKeyEvents(event)"/>
				</s:HGroup>
				
				<s:Spacer height="10"/>
				
				<s:Button id="loginBtn" width="80" height="40" label="Login" click="onLogin()" />
			</s:VGroup>
			
			<s:VGroup width="100%" height="100%" >
				<s:Spacer height="100%"/>
				<s:Label id="conStatusLabel" width="100%" text="" textAlign="center" fontFamily="Arial" paddingBottom="20"/>
			</s:VGroup>
			
		</s:SkinnableContainer>
	</s:Group>
	
	<rtc:ConnectSessionContainer id="cSession" backgroundAlpha="0.0" autoLogin="false" authenticator="{auth}" 
								 width="100%" height="100%" creationComplete="onAuthSuccess()">
		<!-- 
			ScreenShare publish
			Audio Publish
		-->
		<rtc:ScreenSharePublisher id="ssPublisher" width="100%" height="100%"/><!-- quality="10" fps="15" keyFrameInterval="15" performance="10"-->
		
		<rtc:AudioPublisher id="audioPub" height="0" />
		<rtc:AudioSubscriber id="audioSub" height="0" />
		
		<!-- 
		Screen Sharing UI
		-->
		<s:BorderContainer width="100%" height="100%" backgroundAlpha="0.0" borderAlpha="0.0">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" gap="0" >
				
				<s:BorderContainer width="100%" height="100%" bottom="0" backgroundColor="black" borderAlpha="0.0" >
					<!--  ScreenShare viewer -->
					<!--<rtc:ScreenShareSubscriber width="100%" height="100%" showMyStream="false" id="sSub"/>-->
					<s:Group width="100%" height="100%">
						
						<rtc:ScreenShareSubscriber width="100%" height="100%" showMyStream="false" id="sSub"/>
						
						<s:VGroup width="100%" height="100%">
							<s:Spacer height="100%"/>
							<mx:HBox id="presenterRoster" width="100%" height="40" />
						</s:VGroup>
						
					</s:Group>
					
					<!-- Control Bar -->
					<s:SkinnableContainer id="localSSNote" width="100" height="60" horizontalCenter="0" verticalCenter="0" visible="false" >
						<s:Rect left="0" right="0" top="0" bottom="0" radiusX="5" radiusY="5">
							<s:stroke>
								<s:SolidColorStroke color="0x333333" weight="0.5"/>
							</s:stroke>
							<s:fill>
								<s:LinearGradient rotation="90">
									<s:entries>
										<s:GradientEntry color="white"/>
										<s:GradientEntry color="white"/>
										<s:GradientEntry color="0x999999"/>
									</s:entries>
								</s:LinearGradient>
							</s:fill>
						</s:Rect>
						
						<s:Label text="Your Are Sharing Your Screen" width="100%" horizontalCenter="0" verticalCenter="0" 
								 textAlign="center" fontSize="11" />
					</s:SkinnableContainer>
				</s:BorderContainer>
				
				<!-- 
					Menu Bar 
				-->
				<s:SkinnableContainer id="menuBar" width="100%" height="50" verticalCenter="middle" right="10" left="10" backgroundColor="#CCCCCC">
					
					<s:Rect left="0" right="0" top="0" bottom="0">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:entries>
									<s:GradientEntry color="#CCCCCC" ratio="0.3" />
									<s:GradientEntry color="#CCCCCC" ratio="0.8" />
									<s:GradientEntry color="#7B7B7B" ratio="1"/>
								</s:entries>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
					
					<s:HGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" right="10" left="10">
						
						<!-- Mic Button -->
						<s:Group width="40" height="40">
							<s:ToggleButton id="micBtn" click="startAudio()" width="100%" height="100%"/>
							<s:HGroup width="100%" height="100%" gap="0" verticalAlign="middle" horizontalAlign="center"
								useHandCursor="false" mouseEnabled="false" buttonMode="false" mouseChildren="false">
								<s:Image id="micIcon" source="skins/imic.png" fillMode="clip"/>
								<s:Group height="16" >
									<s:Image id="micActivityBar" source="skins/iactivity.png" bottom="0" scaleY="0.1"/>
								</s:Group>
										 
							</s:HGroup>
						</s:Group>
						
						<!-- Screen Share Button -->
						<s:Group width="40" height="40" >
							<s:ToggleButton id="scrShareBtn" width="100%" height="100%" click="startSS()"/>
							<s:Image id="screenicon" source="skins/iscreen.png" 
								 width="100%" height="100%" fillMode="clip" verticalAlign="middle" horizontalAlign="center"
								 useHandCursor="false" mouseEnabled="false" buttonMode="false" mouseChildren="false"/>
						</s:Group>
						
						<!-- Settings Button -->
						<s:Group width="40" height="40" >
							<s:ToggleButton id="settingsBtn" width="100%" height="100%" click="onShowSettings()" />
							<s:Image id="settingsIcon" source="skins/isettings.png" 
								 width="100%" height="100%" fillMode="clip" verticalAlign="middle" horizontalAlign="center"
								 useHandCursor="false" mouseEnabled="false" buttonMode="false" mouseChildren="false"/>
						</s:Group>
						
						<s:Image id="coLogo" source="skins/logo.png" width="100%" height="100%" fillMode="clip" 
								 backgroundAlpha="0.3" verticalAlign="middle" horizontalAlign="center" useHandCursor="true" buttonMode="true"/>
						<s:Image id="tweetIcon" source="skins/itw.png" width="30" height="40" fillMode="clip" backgroundColor="#999999" 
								 backgroundAlpha="0.01" verticalAlign="middle" horizontalAlign="center" useHandCursor="true" buttonMode="true"/>
						<s:Image id="fbIcon" source="skins/ifb.png" width="30" height="40" fillMode="clip" backgroundColor="#999999" 
								 backgroundAlpha="0.01" verticalAlign="middle" horizontalAlign="center" useHandCursor="true" buttonMode="true"/>
						<s:Image id="linkIcon" source="skins/ilink.png" width="30" height="40" fillMode="clip" backgroundColor="#999999"
								 backgroundAlpha="0.01" verticalAlign="middle" horizontalAlign="center" useHandCursor="true" buttonMode="true"/>
					</s:HGroup>
					
				</s:SkinnableContainer>
				
			</s:VGroup>
			
		</s:BorderContainer>
		
		<!-- 
		Viewer Count 
		--> 
		<s:BorderContainer width="80" height="30" backgroundAlpha="0.0" borderAlpha="0.0" >
			
			<s:Rect left="0" right="0" top="0" bottom="0" bottomRightRadiusX="5" 
				topRightRadiusX="5" topRightRadiusY="5" bottomRightRadiusY="5">
				<s:stroke>
					<s:SolidColorStroke color="0x333333" weight="0.5"/>
				</s:stroke>
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:entries>
							<s:GradientEntry color="#505050"/>
							<s:GradientEntry color="#505050"/>
							<s:GradientEntry color="#333333"/>
						</s:entries>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			
			<s:HGroup width="100%" height="100%" gap="0" verticalAlign="middle" paddingLeft="5" paddingRight="5" color="#666666" >
				<s:Label id="userCount" text="0" textAlign="center" width="100%" color="#CCCCCC" fontFamily="Arial" fontSize="12" paddingTop="1" />
				<s:Image source="skins/iusers.png"/>
			</s:HGroup>
			
		</s:BorderContainer>
		
	</rtc:ConnectSessionContainer>
	
	
</s:Application>
